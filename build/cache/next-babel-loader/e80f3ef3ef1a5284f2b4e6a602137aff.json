{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\n\nconst Photo = ({\n  id,\n  name\n}) => {\n  const {\n    0: bolb,\n    1: setBolb\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n\n  const getphoto = async () => {\n    try {\n      const QURL = process.env.DATA_URL + 'addphoto/getphoto/' + id;\n      let get = await fetch(QURL);\n\n      if (get.ok) {\n        let blob = await get.blob();\n        let img = document.createElement('img');\n        img.src = URL.createObjectURL(blob);\n\n        img.onload = () => {\n          document.querySelector('.photo-container').append(img);\n          canvasFunc(img.offsetWidth, img.offsetHeight, img, setBolb);\n        };\n      }\n    } catch (err) {\n      console.log(err);\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    getphoto();\n  }, [id]);\n  return __jsx(React.Fragment, null, bolb && __jsx(\"img\", {\n    src: URL.createObjectURL(bolb),\n    alt: name,\n    className: \"w-100\"\n  }), error && __jsx(\"h2\", null, \"      Wron       \"), __jsx(\"div\", {\n    className: \"photo-container\",\n    style: {\n      position: 'fixed',\n      left: 0,\n      top: 0,\n      visibility: 'hidden',\n      userSelect: 'none'\n    }\n  }), __jsx(\"canvas\", {\n    id: \"canvas\",\n    hidden: true\n  }));\n};\n\nconst canvasFunc = (W, H, img, loadPhoto) => {\n  let canvas = document.getElementById('canvas');\n  let ctx = canvas.getContext('2d');\n  let count = Math.min(W, H);\n  canvas.width = count;\n  canvas.height = count;\n  let w = (Math.max(W, H) - count) / 2;\n  W > H ? ctx.drawImage(img, -w, 0) : ctx.drawImage(img, 0, -w); //裁减成一比一    \n\n  canvas.toBlob(blob => {\n    // 输出图片                     \n    loadPhoto(blob);\n  }, 'image/png');\n};\n\nexport default Photo;","map":null,"metadata":{},"sourceType":"module"}